configuration:
  - release

environment:
  matrix:
    - APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu2004
      GENERATOR: ""

    - APPVEYOR_BUILD_WORKER_IMAGE: macos-bigsur
      GENERATOR: "Ninja"

    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015  # used as mingw
      GENERATOR: "Ninja"
      CC:        C:/mingw-w64/x86_64-8.1.0-posix-seh-rt_v6-rev0/mingw64/bin/gcc.exe
      CXX:       C:/mingw-w64/x86_64-8.1.0-posix-seh-rt_v6-rev0/mingw64/bin/g++.exe

    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
      GENERATOR: "NMake Makefiles JOM"
      VCVARSALL: "%VS140COMNTOOLS%/../../VC/vcvarsall.bat"
      PLATFORM:  x64

install:
- ps: >-
    $VK_SDK = '1.2.170.0'

    if($IsLinux) {
      sudo apt-get update
      sudo apt-get --yes install libvulkan-dev libasound2-dev libx11-dev libxcursor-dev
      # Vulkan SDK
      $env:VK_SDK_PATH     = "$env:APPVEYOR_BUILD_FOLDER/VulkanSDK/$VK_SDK/x86_64"
      $env:VK_LAYER_PATH   = "$env:VK_SDK_PATH/etc/vulkan/explicit_layers.d"
      $env:LD_LIBRARY_PATH = "$env:VK_SDK_PATH/lib"
      Invoke-WebRequest -Uri https://sdk.lunarg.com/sdk/download/$VK_SDK/linux/vulkan_sdk.tar.gz -OutFile VulkanSDK.tar.gz
      mkdir VulkanSDK
      tar -xzf VulkanSDK.tar.gz -C ./VulkanSDK
      }

    if($IsWindows) {
      # Vulkan SDK
      $env:VK_SDK_PATH = "C:/VulkanSDK/$VK_SDK"
      Invoke-WebRequest -Uri https://sdk.lunarg.com/sdk/download/$VK_SDK/windows/vulkan_sdk.exe -OutFile VulkanSDK.exe
      ./VulkanSDK.exe /S
      }

    if($IsLinux) {
      # GLSL compiller
      mkdir glslang
      cd glslang
      Invoke-WebRequest -Uri https://github.com/KhronosGroup/glslang/releases/download/master-tot/glslang-master-linux-Release.zip -OutFile glslang-master.zip
      7z x glslang-master.zip
      cd ..
      $env:PATH += ":$env:APPVEYOR_BUILD_FOLDER/glslang/bin"
      }

    if($IsWindows) {
      mkdir glslang
      cd glslang
      Invoke-WebRequest -Uri https://github.com/KhronosGroup/glslang/releases/download/master-tot/glslang-master-windows-x64-Release.zip -OutFile glslang-master.zip
      7z x glslang-master.zip
      cd ..
      $env:PATH += ";$env:APPVEYOR_BUILD_FOLDER\glslang\bin"
      }

    if($IsMacOS) {
      brew install glslang
      }

before_build:
# Prepare the out-of-source build directory.
  - git submodule -q update --init --recursive
  - mkdir build
  - cmd: set PATH=C:/mingw-w64/x86_64-8.1.0-posix-seh-rt_v6-rev0/mingw64/bin;C:/Qt/Tools/QtCreator/bin;%Path%

build_script:
  - cmake --version
  - cmd: if "%GENERATOR%" == "MinGW Makefiles" gcc --version
  - cmd: if "%GENERATOR%" == "MinGW Makefiles" g++ --version

  - cd Tests/tests
  - cmd: if NOT "%VCVARSALL%" == "" call "%VCVARSALL%" %PLATFORM%
  - cmd: cmake -H. -B../../build -G "%GENERATOR%" -DCMAKE_BUILD_TYPE:STRING=RelWithDebInfo -DCMAKE_SH=CMAKE_SH-NOTFOUND
  - sh:  cmake -H. -B../../build                  -DCMAKE_BUILD_TYPE:STRING=RelWithDebInfo
  - cmake --build ../../build --target TempestTests

test_script:
  - cmd: set Path=C:/mingw-w64/x86_64-8.1.0-posix-seh-rt_v6-rev0/mingw64/bin;%Path%
  - cmd: cd %APPVEYOR_BUILD_FOLDER%\build\testsuite
  # - cmd: TempestTests.exe   disable, since appveyor image doesn't have vulkan drievr anymore
  - sh:  cd $APPVEYOR_BUILD_FOLDER/build/testsuite
  - sh:  printenv
  - sh:  ./TempestTests

artifacts:
  - path: build/tempest/tempest.zip
    name: archive

deploy:
  release: tempest-win32-v$(appveyor_build_version)
  description: 'no release description'
  provider: GitHub
  auth_token:
    secure: 9IgewrZL7gvgL+SofpEkJ6ERQDcsfVBHMUv5qhkj00wfELRiYVJtudQzPVDFE8cq
  artifact: archive
  draft: true
  force_update: true
  prerelease: true
  on:
    branch: master                # release from master branch only
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
    appveyor_repo_tag: true       # deploy on tag push only
