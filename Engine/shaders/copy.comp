#version 440

layout(binding = 0) uniform sampler2D source;

layout(binding = 1, std430) writeonly buffer Output {
  uint val[];
  } result;

layout(push_constant, std430) uniform UboPush {
  int  mip;
  int  bitCnt;
  int  compCnt;
  } push;

void main() {
  ivec2 texSz  = textureSize(source,push.mip);
  uint  texel  = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y*65535;
  uint  bitCnt = push.bitCnt;
  uint  maxV   = (1<<bitCnt)-1;

#if defined(FRM_SMALL)
  uint  pack   = 0;
  uint  comp   = push.compCnt;
  uint  pixCnt = 32/(bitCnt*comp);
  for(int i=0; i<pixCnt; ++i) {
    uint  tid   = texel+i;
    ivec2 at    = ivec2(tid%texSz.x, tid/texSz.x);
    vec4  pixel = texelFetch(source,at,push.mip);

    for(int r=0; r<comp; ++r) {
      uint upx = uint(pixel[r]*maxV);
      pack = pack | (upx << ((i*comp+r)*bitCnt));
      }
    }
  result.val[texel] = pack;
#else
  ivec2 at    = ivec2(texel%texSz.x, texel/texSz.x);
  vec4  pixel = texelFetch(source,at,push.mip);
  uvec4 upx   = uvec4(pixel*maxV);
  uint  pack  = upx.x | (upx.y << 8) | (upx.z << 16) | (upx.w << 24);
  //uint  pack  = packUnorm4x8(pixel); /
  result.val[texel] = pack;
#endif
  }
